---
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "magento.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "magento.fullname" . }}
spec:
  replicas: {{ default 1 .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ template "magento.fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: "RollingUpdate"
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: {{ default "true" .Values.monitoring.pod.scrape | quote }}
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/port: {{ default "9102" .Values.monitoring.pod.port | quote }}
        ## scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/path: {{ default "metrics" .Values.monitoring.pod.path | quote }}
        ## Scrape the pod over protocol
        prometheus.io/scheme: {{ default "http" .Values.monitoring.pod.scheme | quote }}
      labels:
        app: {{ template "magento.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      ##
      ## SECRET
      ##
      #   - name: "m2onk8s"
      #     secret:
      #       secretName: "__SECRET_NAME__"
      containers:
        - name: magento
          ## Environment variables can be populated in a number of ways, including secrets, or just string values. Below
          ## are some examples for you to copy-paste. Remember to uncomment the `env` node!
          #
          # env:
          #
          ## An example of a simple key value pair
          #
          # - name: "FOO"
          #   value: "BAR"
          #
          ## An example of environment variables from a secret
          #
          # - name: "SECRET"
          #   valueFrom:
          #     secretKeyRef:
          #       name: __SECRET_NAME__
          #       key: __KEY_USED_IN_SECRET_NAME__
          #
          volumes:
            - name: "magento-env"
              secret:
                secretName: "{{ .Release.Name }}-magento-env"
                items:
                  - key: "env.php"
                    path: "env.php"
          image: {{ .Values.pod.magento.image | quote }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - containerPort: 80
              protocol: "TCP"
              name: "http"
          volumeMounts:
            - name: "magento-env"
              readOnly: true
              mountPath: "/var/www/app/etc/"
              subPath: "env.php"
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is
            ## listening on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "http"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "http"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      ## Whether to restart this pod. Possible values are:
      ## - Always (Sensible Default)
      ## - OnFailure
      ## - Never
      ##
      ## For more information, see http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: "Always"
      securityContext:
        ## Volumes which support ownership management are modified to be owned and writable by the GID specified in
        ## fsGroup. See the Ownership Management design document for more details.
        ## See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/
        ##      volume-ownership-management.md
        # fsGroup: 1000
        ## A list of groups applied to the first process run in each container, in addition to the containerâ€™s primary
        ## GID. If unspecified, no groups will be added to any container.
        # supplementalGroups: [1000]
